##########################
#Cleaning Dataset :
##########################
library(tidyverse)
library(readr)
library(janitor)
library(dplyr)
pubg_sample_data <- read.csv("E:/06_R_Work/01_CaseStudies/04_Casestudy 4/pubg_sample_dataset.csv")
library(ggplot2)
library(viridis)
library(dplyr)
library(GGally)   # for correlation plot
library(patchwork)
# Prepare data
pubg_sample_data <- pubg_sample_data %>%
mutate(
total_distance = ride_distance + walk_distance + swim_distance,
kill_bin = cut(kills, breaks = seq(0, 20, by = 2))
)
# Hexbin
p1 <- ggplot(pubg_sample_data, aes(x = kills, y = rank_points)) +
geom_hex(bins = 50) +
scale_fill_viridis_c() +
labs(title = "Kills vs Rank Points (Hexbin)") +
theme_minimal()
# Boxplot
p2 <- ggplot(pubg_sample_data, aes(x = kill_bin, y = rank_points)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Rank Points by Kill Bins") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Correlation plot (numeric variables only)
numeric_cols <- pubg_sample_data %>% select(kills, damage_dealt, total_distance, rank_points)
p3 <- ggpairs(numeric_cols) + theme_minimal() + labs(title = "Correlation Matrix")
# Combine plots
final_plot <- (p1 | p2) / p3
library(ggplot2)
library(dplyr)
library(viridis)
library(patchwork)
# Prepare data
pubg_sample_data <- pubg_sample_data %>%
mutate(total_distance = ride_distance + walk_distance + swim_distance,
kill_bin = cut(kills, breaks = seq(0, 20, by = 2)))
numeric_cols <- pubg_sample_data %>%
select(kills, damage_dealt, total_distance, rank_points)
corr_matrix <- cor(numeric_cols, use = "complete.obs")
corr_df <- as.data.frame(as.table(corr_matrix))
# 1️⃣ Hexbin
p1 <- ggplot(pubg_sample_data, aes(x = kills, y = rank_points)) +
geom_hex(bins = 50) +
scale_fill_viridis_c() +
labs(title = "Kills vs Rank Points (Hexbin)") +
theme_minimal()
# 2️⃣ Boxplot
p2 <- ggplot(pubg_sample_data, aes(x = kill_bin, y = rank_points)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Rank Points by Kill Bins") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 3️⃣ Correlation heatmap (ggplot)
p3 <- ggplot(corr_df, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
geom_text(aes(label = round(Freq, 2)), color = "white") +
scale_fill_viridis_c() +
labs(title = "Correlation Heatmap") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Combine with patchwork
final_plot <- (p1 | p2) / p3
final_plot
##########################
#Cleaning Dataset :
##########################
library(tidyverse)
library(readr)
library(janitor)
library(dplyr)
library(ggplot2)
library(dplyr)
pubg_sample_data <- read.csv("E:/06_R_Work/01_CaseStudies/04_Casestudy 4/pubg_sample_dataset.csv")
cor(pubg_dataset$kills , pubg_dataset$rank_points)
cor(pubg_dataset$damage_dealt , pubg_dataset$rank_points)
#Loading the Dataset :
pubg_dataset <- read.csv("E:/06_R_Work/01_CaseStudies/04_Casestudy 4/01_Dataset/PUBG_PC_Dataset.csv")
#Cleaning column names :
pubg_dataset <- clean_names(pubg_dataset)
#Removing Impossible values Exist :
pubg_dataset <- pubg_dataset %>%
filter(kills >= 0,)
#Converting the win_place_per from 0-1 to 0-100 :
pubg_dataset <- pubg_dataset %>%
mutate(win_place_perc = win_place_perc * 100)
#Now selecting only useful columns for our analysis :
pubg_dataset <- pubg_dataset %>%
select(
assists, boosts, damage_dealt, dbn_os, headshot_kills, heals,
kills, kill_streaks, longest_kill, revives,
ride_distance, walk_distance, swim_distance,
team_kills, road_kills, vehicle_destroys,
weapons_acquired, match_type, win_place_perc ,rank_points
)
#Combining the distance columns :
pubg_dataset <- pubg_dataset %>%
mutate(total_distance = ride_distance + walk_distance + swim_distance)
colnames(pubg_sample_data)
glimpse(pubg_sample_data)
cor(pubg_dataset$kills , pubg_dataset$rank_points)
cor(pubg_dataset$damage_dealt , pubg_dataset$rank_points)
cor(pubg_dataset$total_distance , pubg_dataset$rank_points)
##############################################################
#Finding the average kills and winning percntage by match type
##############################################################
summary<- pubg_dataset %>%
group_by(match_type) %>%
summarize(avg_kills = mean(kills) , avg_wining_per = mean(win_place_perc))
summary[which.max(summary$avg_kills),]
summary[which.max(summary$avg_wining_per),]
summary[which.max(summary$avg_wining_per),]
#Average Kills by Match Type :
ggplot(summary, aes(x = reorder(match_type, -avg_kills), y = avg_kills, fill = match_type)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(avg_kills, 2)),  # show values rounded to 2 decimals
vjust = -0.5,                      # position slightly above bars
size = 2.8) +
labs(title = "Average Kills by Match Type", x = "Match Type", y = "Average Kills") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 50, hjust = 1) , legend.position = "none")
#Average Wining percentage by Match Type :
ggplot(summary , aes(x = reorder(match_type, -avg_wining_per),y = avg_wining_per , fill = match_type)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(avg_wining_per, 2)),  # show values rounded to 2 decimals
vjust = -0.5,                      # position slightly above bars
size = 2.8) +
labs(title = "Average Wining percentage by Match Type", x = "Match Type", y = "Average Winning Percentage") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),legend.position = "none")
#Filtering the kills for Scatterplot , removing the outliars :
pubg_change <- pubg_sample_data %>%
filter(kills<=20)
cor(pubg_sample_data$kills , pubg_sample_data$win_place_perc , use = "complete.obs")
ggplot(pubg_change, aes(x = win_place_perc, y = kills)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5, se = FALSE) +
theme_minimal()
ggplot(pubg_sample_data , aes(x = rank_points , y = kills)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How kills influence wining chances" , x = "Winning Chances" , y= "Kills") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#Damage vs Winig Place Percentage :
ggplot(pubg_sample_data , aes(x = rank_points , y = damage_dealt)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How damage influence wining chances" , x = "Winning Chances" , y= "Damage Dealt") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#Kills vs Winnig Place Percentage :
ggplot(pubg_sample_data , aes(x = rank_points , y = total_distance)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How traveled distance influence wining chances" , x = "Winning Chances" , y= "Distance Travelled") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
View(pubg_sample_data)
#As some outliars exists therefore i have to :
pubg_filtered_dataset <- pubg_sample_data[pubg_sample_data$rank_points < 3000, ]
#Kills vs Winnig Place Percentage :
ggplot(pubg_filtered_dataset , aes(x = rank_points , y = total_distance)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How traveled distance influence wining chances" , x = "Winning Chances" , y= "Distance Travelled") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#Kills vs Winig Place Percentage :
ggplot(pubg_filtered_dataset , aes(x = rank_points , y = kills)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How kills influence wining chances" , x = "Winning Chances" , y= "Kills") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#Damage vs Winig Place Percentage :
ggplot(pubg_filtered_dataset , aes(x = rank_points , y = damage_dealt)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How damage influence wining chances" , x = "Winning Chances" , y= "Damage Dealt") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#Removing the outliars from sample dataset :
pubg_filtered_dataset <- pubg_sample_data %>%
filter(kills<=25 , rank_points <=3000 , damage_dealt <=3000)
cor(pubg_filtered_dataset$kills , pubg_sample_data$win_place_perc , use = "complete.obs")
cor(pubg_filtered_dataset$kills , pubg_filtered_dataset$win_place_perc , use = "complete.obs")
ggplot(pubg_filtered_dataset, aes(x = win_place_perc, y = kills)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5, se = FALSE) +
theme_minimal()
#Combining Each matrix and then checking the how things are working :
pubg_filtered_dataset %>%
mutate(metrices = kills + damage_dealt + total_distance) %>%
ggplot(pubg_filtered_dataset , aes(x = rank_points , y = metrices)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How traveled distance influence wining chances" , x = "Winning Chances" , y= "Distance Travelled") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#Combining Each matrix and then checking the how things are working :
pubg_filtered_dataset %>%
mutate(metrices = kills + damage_dealt + total_distance) %>%
ggplot(aes(x = rank_points , y = metrices)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How traveled distance influence wining chances" , x = "Winning Chances" , y= "Distance Travelled") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#Kills vs Wining Place Percentage :
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
p1 <- ggplot(pubg_filtered_dataset , aes(x = rank_points , y = kills)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How kills influence wining chances" , x = "Winning Chances" , y= "Kills") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#Damage vs Winig Place Percentage :
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
p2 <- ggplot(pubg_filtered_dataset , aes(x = rank_points , y = damage_dealt)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How damage influence wining chances" , x = "Winning Chances" , y= "Damage Dealt") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#Traveled Distance vs Winnig Place Percentage :
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
p3 <- ggplot(pubg_filtered_dataset , aes(x = rank_points , y = total_distance)) +
geom_point(alpha = 0.3 , size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"),linewidth = 1.5,color = "red", se = FALSE) +
labs(title = "How traveled distance influence wining chances" , x = "Winning Chances" , y= "Distance Travelled") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
#Creating Dashboard :
library(patchwork)
(p1 | p2) / p3 +
plot_annotation(title = "Influence of Player Metrics on Rank Points",
theme = theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14)))
glimpse(pubg_filtered_dataset)
cor(pubg_sample_data$weapons_acquired , pubg_filtered_dataset$kills)
cor(pubg_sample_data$weapons_acquired , pubg_filtered_dataset$kills , use = "complete.obs")
cor(pubg_filtered_data$weapons_acquired , pubg_filtered_dataset$kills , use = "complete.obs")
cor(pubg_filtered_dataset$weapons_acquired , pubg_filtered_dataset$kills , use = "complete.obs")
#0.3351338
cor(pubg_filtered_dataset$weapons_acquired, pubg_filtered_dataset$win_place_perc)
#0.583444
#Shows a Strong Positive Corelation
max(pubg_filtered_dataset$weapons_acquired)
pubg_filtered_dataset %>%
mutate(weapon_bins = cut(weapons_acquired, breaks = c(0,2,5,10,20,50))) %>%
group_by(weapon_bins) %>%
summarise(avg_win = mean(win_place_perc)) %>%
ggplot(aes(x = weapon_bins, y = avg_win, fill = weapon_bins)) +
geom_col() +
labs(title = "Average Win % by Weapons Acquired", x = "Weapon Bins", y = "Avg Win %") +
theme_minimal()
ggplot(pubg_filtered_dataset, aes(x = as.factor(cut(weapons_acquired, breaks=5)),
y = win_place_perc)) +
geom_violin(fill = "lightgreen") +
labs(title = "Distribution of Win % by Weapon Count", x = "Weapon Count (Binned)", y = "Win %") +
theme_minimal()
pubg_filtered_dataset %>%
mutate(weapon_bins = cut(weapons_acquired, breaks = c(0,2,5,10,20,50,96),
labels = c("0-2","3-5","6-10","11-20","21+"))) %>%
ggplot(aes(x = weapon_bins, y = win_place_perc)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Winning Percentage by Weapons Acquired",
x = "Weapons Acquired (Binned)", y = "Winning Percentage") +
theme_minimal()
pubg_filtered_dataset %>%
mutate(weapon_bins = cut(weapons_acquired, breaks = c(0,2,5,10,20,50,100),
labels = c("0-2","3-5","6-10","11-20","21+"))) %>%
ggplot(aes(x = weapon_bins, y = win_place_perc)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Winning Percentage by Weapons Acquired",
x = "Weapons Acquired (Binned)", y = "Winning Percentage") +
theme_minimal()
pubg_filtered_dataset %>%
mutate(weapon_bins = cut(weapons_acquired, breaks = c(0,2,5,10,20,50,),
labels = c("0-2","3-5","6-10","11-20","21+"))) %>%
ggplot(aes(x = weapon_bins, y = win_place_perc)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Winning Percentage by Weapons Acquired",
x = "Weapons Acquired (Binned)", y = "Winning Percentage") +
theme_minimal()
pubg_filtered_dataset %>%
mutate(weapon_bins = cut(weapons_acquired, breaks = c(0,2,5,10,20,50,100),
labels = c("0-2","3-5","6-10","11-20","21+"))) %>%
ggplot(aes(x = weapon_bins, y = win_place_perc)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Winning Percentage by Weapons Acquired",
x = "Weapons Acquired (Binned)", y = "Winning Percentage") +
theme_minimal()
pubg_filtered_dataset %>%
mutate(weapon_bins = cut(weapons_acquired, breaks = c(0,2,5,10,20,50,100),
labels = c("0-2","3-5","6-10","11-20","21-50","50-100"))) %>%
ggplot(aes(x = weapon_bins, y = win_place_perc)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Winning Percentage by Weapons Acquired",
x = "Weapons Acquired (Binned)", y = "Winning Percentage") +
theme_minimal()
summary(pubg_filtered_dataset$weapons_acquired)
pubg_filtered_dataset %>%
mutate(weapon_bins = cut(weapons_acquired, breaks = c(0,2,5,10,20,50,100),
labels = c("0-2","3-5","6-10","11-20","21-50","51-100"))) %>%
ggplot(aes(x = weapon_bins, y = win_place_perc)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Winning Percentage by Weapons Acquired",
x = "Weapons Acquired (Binned)", y = "Winning Percentage") +
theme_minimal()
pubg_filtered_dataset <- pubg_filtered_dataset %>%
mutate(
weapon_bins = cut(
weapons_acquired,
breaks = c(0, 2, 5, 10, 20, 50, 100),
labels = c("0-2", "3-5", "6-10", "11-20", "21-50", "51-100"),
include.lowest = TRUE,    # include 0
right = TRUE              # (0,2], includes upper bound
)
)
pubg_filtered_dataset <- pubg_filtered_dataset %>%
mutate(
weapon_bins = cut(
weapons_acquired,
breaks = c(-1, 2, 5, 10, 20, 50, 100),   # start from -1 so 0 is included
labels = c("0-2", "3-5", "6-10", "11-20", "21-50", "51-100"),
include.lowest = TRUE,
right = TRUE
)
)
pubg_filtered_dataset <- pubg_filtered_dataset %>%
mutate(
weapon_bins = cut(
weapons_acquired,
breaks = c(-1, 2, 5, 10, 20, 50, 100),   # start from -1 so 0 is included
labels = c("0-2", "3-5", "6-10", "11-20", "21-50", "51-100"),
include.lowest = TRUE,
right = TRUE
)
)
table(is.na(pubg_filtered_dataset$weapon_bins))
ggplot(pubg_filtered_dataset, aes(x = weapon_bins, y = win_place_perc)) +
geom_boxplot(fill = "skyblue") +
labs(title = "Winning Percentage by Weapons Acquired",
x = "Weapons Acquired (Binned)", y = "Winning Percentage") +
theme_minimal()
###############################
#Does Heal or Damage Corelate ?
###############################
View(pubg_filtered_dataset)
glimpse(pubg_filtered_dataset)
pubg_filtered_dataset <- pubg_filtered_dataset %>%
select(-c(kill_bin,X.1,X,id,group_id,match_id,dbn_os,num_groups,revives))
glimpse(pubg_filtered_dataset)
write.csv(pubg_filtered_dataset,"E:/06_R_Work/01_CaseStudies/04_Casestudy 4/pubg(filtered,cleaned,sampled).csv")
cor(pubg_filtered_dataset$heals , pubg_filtered_dataset$kills)
cor(pubg_filtered_dataset$heals , pubg_filtered_dataset$damage_dealt)
cor(pubg_filtered_dataset$longest_kill , pubg_filtered_dataset$rank_points)
cor(pubg_filtered_dataset$team_kills , pubg_filtered_dataset$rank_points)
correlation_summary <- pubg_filtered_dataset %>%
select(kills, damage_dealt, total_distance, heals, boosts, assists, weapons_acquired, longest_kill, team_kills, win_place_perc, rank_points) %>%
cor(use = "complete.obs")
correlation_summary["rank_points", ] %>% sort(decreasing = TRUE)
############################################
#Categorizing players based on damage delth
############################################
summary(pubg_filtered_dataset$damage_dealt)
############################################
#Categorizing players based on damage delth
############################################
pubg_filtered_dataset$player_type <- cut(
pubg_filtered_dataset$damage_dealt,
breaks = c(-Inf, 85, 187, Inf),
labels = c("Noob", "Average", "Pro")
)
aggregate(win_place_perc ~ player_type, data = pubg_filtered_dataset, mean)
summary <- pubg_filtered_dataset %>%
group_by(player_type) %>%
summarize(win_chance = mean(win_place_perc) )
ggplot(summary , aes(x = player_type , y = win_chance , fill = player_type)) +
geom_col()
ggplot(summary , aes(x = player_type , y = win_chance , fill = player_type)) +
geom_col(show.legend = N/A) +
ggplot(summary , aes(x = player_type , y = win_chance , fill = player_type)) +
geom_col(show.legend = N/A)
ggplot(summary , aes(x = player_type , y = win_chance , fill = player_type)) +
geom_col(show.legend = "none")
ggplot(summary , aes(x = player_type , y = win_chance , fill = player_type)) +
geom_col(show.legend = "none") +
labs(title = "Players Type vs Winning Chance" , subtitle = "Categorized player type based on damage dealt",x = "Player Type" , y = "Winning Chance")
ggplot(summary , aes(x = player_type , y = win_chance , fill = player_type)) +
geom_col(show.legend = "none") +
labs(title = "Players Type vs Winning Chance" , subtitle = "Categorized players type based on damage dealt",x = "Player Type" , y = "Winning Chance")
ggplot(summary , aes(x = player_type , y = win_chance , fill = player_type)) +
geom_col(show.legend = "none") +
labs(title = "Players Type vs Winning Chance" , subtitle = "Categorized players type based on damage dealt",x = "Player Type" , y = "Winning Chance") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
axis.text.x = element_text(face = "bold"))
ggplot(summary , aes(x = player_type , y = win_chance , fill = player_type)) +
geom_col(show.legend = "none") +
labs(title = "Players Type vs Winning Chance" , subtitle = "Categorized players type based on damage dealt",x = "Player Type" , y = "Winning Chance") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
plot.subtitle = element(hjust = 0.5),
axis.text.x = element_text(face = "bold"))
ggplot(summary , aes(x = player_type , y = win_chance , fill = player_type)) +
geom_col(show.legend = "none") +
labs(title = "Players Type vs Winning Chance" , subtitle = "Categorized players type based on damage dealt",x = "Player Type" , y = "Winning Chance") +
theme_minimal() +
theme(plot.title = element_text(face = "bold" , hjust = 0.5) ,
plot.subtitle = element_text(hjust = 0.5),
axis.text.x = element_text(face = "bold"))
ggplot(summary, aes(x = player_type, y = win_chance, fill = player_type)) +
geom_col(show.legend = FALSE) +
labs(
title = "Players Types Categorized Based on Damage Dealt",
subtitle = "Comparison of Winning Chances by Player Type",
x = "Player Type",
y = "Winning Chance (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text.x = element_text(face = "bold")
)
ggplot(summary, aes(x = player_type, y = win_chance, fill = player_type , size = 1.6)) +
geom_col(show.legend = FALSE ) +
labs(
title = "Players Types Categorized Based on Damage Dealt",
subtitle = "Comparison of Winning Chances by Player Type",
x = "Player Type",
y = "Winning Chance (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text.x = element_text(face = "bold")
)
ggplot(summary, aes(x = player_type, y = win_chance, fill = player_type )) +
geom_col(width = 0.6,show.legend = FALSE ) +
labs(
title = "Players Types Categorized Based on Damage Dealt",
subtitle = "Comparison of Winning Chances by Player Type",
x = "Player Type",
y = "Winning Chance (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.text.x = element_text(face = "bold")
)
#####################
#Tableau CSV :
#####################
write.csv(pubg_filtered_dataset, "E:/06_R_Work/01_CaseStudies/04_Casestudy 4/cleaned_pubg_dataset_Tableau.csv", row.names = FALSE)
